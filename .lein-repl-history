(require 'sleuth.test.definitions :reload-all)
(require '[monger.collection :as mc])
(use 'monger.core)
(require '[monger.collection :as mc])
(sleuth.defintions/create! {:site "stuff" :test "test"})
(require 'sleuth.defintions)
(require 'sleuth.defintions :reload)
(sleuth.defintions/create! {:site "stuff" :test "test"})
sleuth
(keys {:_id stuff})
(keys {:_id "stuff"})
(-> {:_id "stuff"} keys first)
(merge {:test 1} {:test nil})
(bytes "test")
(map bytes "test")
(into byte-array (map bytes "test")
)
(byte-array (map bytes "test"))
(byte-array (into [] (map bytes "test")))
(into [] (map bytes "test"))
(byte-array (into [] (map bytes "test")))
(map bytes 'a)
(.getBytes "test")
(def s {:test "test"})
(conj s {:test1 "test"})
(def a (atom {}))
(def a update-in [:test] "test")
(swap! a update-in [:test] "test")
(str :keyword)
(refind #"-ids" (str :site-ids))
(re-find #"-ids" (str :site_ids))
(re-find #"-ids" (str :site-ids))
(map println {:test "test"})
(re-find #"-ids|-id" (str :site-ids))
(re-find #"-ids|-id" (str :site-id))
\t
true
(= \t true)
(if \t 1)
(if true 1)
