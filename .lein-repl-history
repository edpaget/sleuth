(require 'sleuth.test.definitions :reload-all)
(require '[monger.collection :as mc])
(use 'monger.core)
(require '[monger.collection :as mc])
(sleuth.defintions/create! {:site "stuff" :test "test"})
(require 'sleuth.defintions)
(require 'sleuth.defintions :reload)
(sleuth.defintions/create! {:site "stuff" :test "test"})
sleuth
(keys {:_id stuff})
(keys {:_id "stuff"})
(-> {:_id "stuff"} keys first)
(merge {:test 1} {:test nil})
(bytes "test")
(map bytes "test")
(into byte-array (map bytes "test")
)
(byte-array (map bytes "test"))
(byte-array (into [] (map bytes "test")))
(into [] (map bytes "test"))
(byte-array (into [] (map bytes "test")))
(map bytes 'a)
(.getBytes "test")
(def s {:test "test"})
(conj s {:test1 "test"})
(def a (atom {}))
(def a update-in [:test] "test")
(swap! a update-in [:test] "test")
(str :keyword)
(refind #"-ids" (str :site-ids))
(re-find #"-ids" (str :site_ids))
(re-find #"-ids" (str :site-ids))
(map println {:test "test"})
(re-find #"-ids|-id" (str :site-ids))
(re-find #"-ids|-id" (str :site-id))
\t
true
(= \t true)
(if \t 1)
(if true 1)
(System/getEnv)
(System/getenv)
(get (System/getenv) "AMAZON_SECRET_ID")
(get (System/getenv) "AMAZON_ACCESS_ID")
(require '[ceremick.bandoler :as sqs])
(require '[cemerick.bandalore :as sqs])
(def client (sqs/create-client (get (System/getenv) "AMAZON_SECRET_ID") (get (System/getenv) "AMAZON_SECRET_ACCSS_KEY")))
(def client (sqs/create-client (get (System/getenv) "AMAZON_SECRET_ID") (get (System/getenv) "AMAZON_SECRET_ACCESS_KEY")))
(def q (sqs/create-queue client "sleuth-repl"))
q
(sqs/send client q "test-message")
(sqs/list-queues client)
(sqs/receive client q)
(sqs/delete-queue client q)
(def q (sqs/list-queues))
(sqs/list-queues client)
(def q (first *1))
q
(sqs/receive client q)
clojure.reader/read-edn
(some #{1 2 3 4 5} '(1 2 3 4 5 6 7 8 9 10 11))
(some #{1 2 3 4 5} '(1 2 3 5 6 7 8 9 10 11))
(some #{1 2} '(1 3 4))
(doc some)
(apply and '())
(apply and [])
(doc and)
(and (when "test" true) (when nil false))
(and (when "test" true))
(and (when "test" true) (when "test" false))
(and nil false)
(and (when "test" true) (when nil "test"))
